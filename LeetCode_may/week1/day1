// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
        int l=1,r=n;
        while (l <= r) { 
        int m = l + (r - l) / 2; 
  
        // Check if x is present at mid 
        if ((isBadVersion(m)&&!isBadVersion(m-1)))
            return m; 
        else if(!isBadVersion(m)&&isBadVersion(m+1))
            return m+1;
        // If x greater, ignore left half 
        if (isBadVersion(m)&&isBadVersion(m-1)) 
            r = m - 1;
  
        // If x is smaller, ignore right half 
        else if(!isBadVersion(m)&&!isBadVersion(m+1))
           l = m + 1;
    } 
       
        return 1;
    }
};